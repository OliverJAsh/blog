{
    "title": "Big CSS: Harry Roberts at the Digital Barn 2012",
    "date": "2012-09-22",
    "body": "<p>The Digital Barn was a fantastic single day conference held in Barnsley, catering for all web-types. As somebody who appreciates the challenge of writing scalable and maintainable code, I was most excited to hear what Harry Roberts had to say on the subject of CSS. In his talk <a href=\"http://www.youtube.com/watch?v=R-BX4N8egEc&amp;hd=1\">Big CSS</a>, Harry re-establishes concepts such as <a href=\"http://smacss.com/\">SMACSS</a> and <a href=\"http://oocss.org/\">OOCSS</a>, and then walks us through the methods, tools and mindsets necessary for working on CSS in massive projects and as part of a team. Here’s what I took away from the talk. Harry has also recorded himself presenting this talk, which is <a href=\"http://www.youtube.com/watch?v=R-BX4N8egEc&amp;hd=1\">available online for your own viewing</a>.</p><ul><li>Managing big CSS is all about managing the CSS developers, and making sure they’re writing the code in a sensible manner.</li><li>Strike a balance between the CSS and HTML if you’re going to keep it scalable.</li><li>Preprocessors don’t promote a good understanding of CSS at its root. A sound knowledge of CSS architecture is more use than a preprocessor.</li><li>Once a sound understanding of CSS architecture is acquired, that’s when you can start to use preprocessors to your advantage.</li></ul><h2 id=\"components_and_extensions\">Components and Extensions</h2><ul><li>To write object-oriented, re-usable CSS, you have to look a level deeper into the design in order to spot patterns for abstraction – ‘a componentised web’.</li><li>An object is just a design pattern. You don’t really care <em>what</em> it does in practice. That’s where extensions come in.</li><li>‘Extensions are much more specific’ – actual jobs. For example, an <code>nav</code> object might have several extensions: <code>user-links</code>, <code>breadcrumbs</code>, <code>site-nav</code>, <code>sponsor-logos</code>, <code>footer-nav</code>.</li><li>The more discrete and versatile your components are, the more you can re-use them, and the easier it is to maintain your CSS.</li><li>Abstractions come free-of-charge – they are already there and free to use over and over and over…</li><li>When measuring impact to a codebase, look out for bespoke CSS. Only ever measure bespoke code (extensions).</li><li>The ‘things’ that make up a design component are probably going to be re-used.</li></ul><h3 id=\"abstraction_examples\">Abstraction Examples</h3><ul><li><code>ui-list</code> – A blocky list: generic list, any type of content</li><li><code>s</code> – Sprite</li><li><code>ico-text</code> – Icons with text: sports spacing/alignment, any icon, any text</li></ul><h2 id=\"code_organisation_and_maintainability\">Code Organisation and Maintainability</h2><ul><li><a href=\"http://www.impressivewebs.com/css-specificity-irrelevant/\">What if specificity didn’t exist?</a></li><li>Write rulesets in a subsequent order to take advantage of the cascade (in place of specificity).</li><li>Subsequent rulesets should only ever inherit, never undo. If you’re undoing CSS down the stylesheet, you’re probably doing it wrong.</li><li>Preprocessors advertise nesting as a feature. Nesting can be useful, but to sell it as a feature is very dangerous. Nesting descendants increases specificity and limits portability.</li><li>Avoid chaining selectors. Rather, use a chained class name or a ‘modifier’ (i.e. <code>.error-msg</code> instead of <code>.error.msg</code>).</li><li>Indenting rulesets is good because you can see the skeleton of a component easily, without referring to the HTML. It gives the next developer a lot of information at a glance.</li><li>‘Quasi-qualified selectors’ – we shouldn’t chain classes with element selectors for specificity reasons, but it is useful. By qualifying the selector and commenting it out, we give the next developer a lot more information, without increasing specificity (i.e. <code>/*html*/.product-page</code>)</li><li>If you’re not using partials (preprocessors), use a table of contents instead.</li><li>What if the next developer needs to make a new component? By commenting our CSS with tags, the developer can easily find existing styles that do similar jobs, which he/she may be able to re-use (i.e. ‘lists’, ‘tables’ or ‘layout’).</li><li>Messy CSS is not a fault of the language. Rather, it’s a fault in the developers on the team. You need to make sure your team are all brought in to your way of working.</li><li>People do want to do a good job, so talk to people – manage your team as well as your codebase.</li></ul>"
}
