{
    "title": "Gutters for flexible components with sliced padding",
    "date": "2016-12-28",
    "body": "<style>svg{font-family: monospace; font-size: smaller;}</style><svg width=\"0\" height=\"0\"> <defs> <pattern id=\"smallGrid\" width=\"10\" height=\"10\" patternUnits=\"userSpaceOnUse\"> <path d=\"M 10 0 L 0 0 0 10\" fill=\"none\" stroke=\"#bbb\" stroke-width=\"1\"/> </pattern> </defs></svg><p>There are <a href=\"http://www.heydonworks.com/article/flexbox-grid-finesse\">several ways to implement gutters between items in flexible layouts</a>, each with their own set of hacks. In this post I want to share a simple technique I’ve been using to much success, which I’ll refer to as “sliced padding”.</p><p>To demonstrate this technique, we’ll use an example.</p><h2>Wireframe</h2><p>Given the following wireframe for a button with an icon and some text, how should we implement the gutter between the icon and text? We’ll say the padding of the button is 1 unit, and the gutter is ½ units. When forced to shrink in size, the button can wrap its contents.</p><p>Layout is trivial thanks to flexbox.</p><ul> <li><code>display: flex</code> enables flexbox.</li><li><code>flex-wrap: wrap</code> enables wrapping of the flex items (button icon and text) when the parent (button) element can no longer contain all flex items on a single line.</li><li><code>justify-content: center</code> centers the flex items on the X axis.</li></ul><svg width=\"210\" height=\"80\" style=\"border: 1px solid;\"> <rect width=\"100%\" height=\"100%\" fill=\"url(#smallGrid)\"/> <rect width=\"40\" height=\"40\" x=\"20\" y=\"20\"/> <rect width=\"120\" height=\"40\" x=\"70\" y=\"20\"/> <text x=\"105\" y=\"10\" text-anchor=\"middle\" dominant-baseline=\"middle\">1</text> <text x=\"200\" y=\"40\" text-anchor=\"middle\" dominant-baseline=\"middle\">1</text> <text x=\"105\" y=\"70\" text-anchor=\"middle\" dominant-baseline=\"middle\">1</text> <text x=\"10\" y=\"40\" text-anchor=\"middle\" dominant-baseline=\"middle\">1</text> <text fill=\"white\" x=\"40\" y=\"40\" text-anchor=\"middle\" dominant-baseline=\"middle\">icon</text> <text fill=\"white\" x=\"130\" y=\"40\" text-anchor=\"middle\" dominant-baseline=\"middle\">text</text></svg><svg width=\"160\" height=\"130\" style=\"border: 1px solid;\"> <rect width=\"100%\" height=\"100%\" fill=\"url(#smallGrid)\"/> <rect width=\"40\" height=\"40\" x=\"60\" y=\"20\"/> <rect width=\"120\" height=\"40\" x=\"20\" y=\"70\"/> <text fill=\"white\" x=\"80\" y=\"40\" text-anchor=\"middle\" dominant-baseline=\"middle\">icon</text> <text fill=\"white\" x=\"80\" y=\"90\" text-anchor=\"middle\" dominant-baseline=\"middle\">text</text></svg><p>We can’t use <a href=\"http://csswizardry.com/2012/06/single-direction-margin-declarations/\">single direction margins</a> because the exact location of the gutter is unknown as the component is designed to be flexible. When exactly we switch from vertical layout to horizontal or vice versa is unknown, because it depends on the component’s contents and its surrounding environment on the page. There’s no way to use media queries to solve this problem.</p><p>We could apply single direction margins along two axis (e.g. right for X and bottom for Y), but this would require negative margin hacks on the container element, meaning we can no longer apply useful margins without additional wrapping of elements.</p><svg width=\"210\" height=\"80\" style=\"border: 1px solid;\"> <rect width=\"100%\" height=\"100%\" fill=\"url(#smallGrid)\"/> <rect width=\"40\" height=\"40\" x=\"20\" y=\"20\"/> <rect width=\"10\" height=\"40\" x=\"60\" y=\"20\" fill=\"hsla(40, 100%, 50%, 0.4)\"/> <rect width=\"120\" height=\"40\" x=\"70\" y=\"20\"/> <rect width=\"210\" height=\"20\" x=\"0\" y=\"0\" fill=\"hsla(100, 100%, 80%, 0.3)\"/> <rect width=\"20\" height=\"40\" x=\"190\" y=\"20\" fill=\"hsla(100, 100%, 80%, 0.3)\"/> <rect width=\"210\" height=\"20\" x=\"0\" y=\"60\" fill=\"hsla(100, 100%, 80%, 0.3)\"/> <rect width=\"20\" height=\"40\" x=\"0\" y=\"20\" fill=\"hsla(100, 100%, 80%, 0.3)\"/> <text fill=\"white\" x=\"40\" y=\"40\" text-anchor=\"middle\" dominant-baseline=\"middle\">icon</text> <text fill=\"white\" x=\"130\" y=\"40\" text-anchor=\"middle\" dominant-baseline=\"middle\">text</text></svg><svg width=\"160\" height=\"130\" style=\"border: 1px solid;\"> <rect width=\"100%\" height=\"100%\" fill=\"url(#smallGrid)\"/> <rect width=\"40\" height=\"40\" x=\"60\" y=\"20\"/> <rect width=\"40\" height=\"10\" x=\"60\" y=\"60\" fill=\"hsla(40, 100%, 50%, 0.4)\"/> <rect width=\"120\" height=\"40\" x=\"20\" y=\"70\"/> <rect width=\"160\" height=\"20\" x=\"0\" y=\"0\" fill=\"hsla(100, 100%, 80%, 0.3)\"/> <rect width=\"20\" height=\"90\" x=\"140\" y=\"20\" fill=\"hsla(100, 100%, 80%, 0.3)\"/> <rect width=\"160\" height=\"20\" x=\"0\" y=\"110\" fill=\"hsla(100, 100%, 80%, 0.3)\"/> <rect width=\"20\" height=\"90\" x=\"0\" y=\"20\" fill=\"hsla(100, 100%, 80%, 0.3)\"/> <text fill=\"white\" x=\"80\" y=\"40\" text-anchor=\"middle\" dominant-baseline=\"middle\">icon</text> <text fill=\"white\" x=\"80\" y=\"90\" text-anchor=\"middle\" dominant-baseline=\"middle\">text</text></svg><h2>Sliced padding</h2><p>A simple solution to this is to slice and compose our padding unit, letting maths take care of how much spacing to apply between items for all layout permutations.</p><p>If we give the button padding of ¾ units and wrap the button’s icon and text with ¼ units of padding, the button’s contents will appear to have the correct padding of ¾ + ¼ = 1 unit. The button’s icon and text each have ¼ units of padding, so when sitting together—horizontally and/or vertically—the gutter between these elements will appear as desired, because ¼ + ¼ = ½ units.</p><svg width=\"210\" height=\"80\" style=\"border: 1px solid;\"> <rect width=\"100%\" height=\"100%\" fill=\"url(#smallGrid)\"/> <rect width=\"100%\" height=\"100%\" fill=\"hsla(100, 100%, 80%, 0.3)\"/> <rect width=\"50\" height=\"50\" x=\"15\" y=\"15\" fill=\"none\" stroke=\"black\"/> <rect width=\"40\" height=\"40\" x=\"20\" y=\"20\"/> <rect width=\"130\" height=\"50\" x=\"65\" y=\"15\" fill=\"none\" stroke=\"black\"/> <rect width=\"120\" height=\"40\" x=\"70\" y=\"20\"/> <text fill=\"white\" x=\"40\" y=\"40\" text-anchor=\"middle\" dominant-baseline=\"middle\">icon</text> <text fill=\"white\" x=\"130\" y=\"40\" text-anchor=\"middle\" dominant-baseline=\"middle\">text</text></svg><svg width=\"160\" height=\"130\" style=\"border: 1px solid;\"> <rect width=\"100%\" height=\"100%\" fill=\"url(#smallGrid)\"/> <rect width=\"100%\" height=\"100%\" fill=\"hsla(100, 100%, 80%, 0.3)\"/> <rect width=\"50\" height=\"50\" x=\"55\" y=\"15\" fill=\"none\" stroke=\"black\"/> <rect width=\"40\" height=\"40\" x=\"60\" y=\"20\"/> <rect width=\"130\" height=\"50\" x=\"15\" y=\"65\" fill=\"none\" stroke=\"black\"/> <rect width=\"120\" height=\"40\" x=\"20\" y=\"70\"/> <text fill=\"white\" x=\"80\" y=\"40\" text-anchor=\"middle\" dominant-baseline=\"middle\">icon</text> <text fill=\"white\" x=\"80\" y=\"90\" text-anchor=\"middle\" dominant-baseline=\"middle\">text</text></svg><p>I’ve found the sliced padding technique to scale nicely for all of my spacing requirements. Below are some more examples demonstrating this technique.</p><h2>Examples</h2><p>The page below has three examples of this technique in action: button with icon, group of buttons, and form layout. To demonstrate flexibility, each example has full and short width variants.</p><p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"XNvrVb\" data-default-tab=\"result\" data-user=\"OliverJAsh\" data-embed-version=\"2\" data-pen-title=\"XNvrVb\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/OliverJAsh/pen/XNvrVb/\">XNvrVb</a> by Oliver Joseph Ash (<a href=\"http://codepen.io/OliverJAsh\">@OliverJAsh</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>"
}
